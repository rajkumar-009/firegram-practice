{"version":3,"sources":["comps/Title.js","firebase/config.js","hooks/useStorage.js","comps/Progressbar.js","comps/UploadForm.js","hooks/useFirestore.js","comps/ImageGrid.js","comps/Modal.js","App.js","index.js"],"names":["Title","className","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","projectStorage","projectFirestore","timestamp","FieldValue","serverTimestamp","useStorage","file","useState","progress","setProgress","error","setError","url","setUrl","useEffect","storageRef","ref","name","collectionRef","collection","put","on","snap","percent","bytesTransferred","totalBytes","err","a","createdAt","getDownloadURL","add","Progressbar","setFile","div","initial","width","animate","propType","PropTypes","object","isRequired","func","UploadForm","imageTypes","type","onChange","e","selected","target","files","includes","useFirestore","docs","setDocs","unsubscribe","orderBy","onSnapshot","documents","forEach","doc","push","data","id","ImageGrid","setSelectedImg","map","key","layout","whileHover","opacity","onClick","img","src","transition","delay","alt","Modal","selectedImg","classList","contains","y","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c29ee371.chunk.js","sourcesContent":["// Title component\nimport React from \"react\";\n\nconst Title = () => {\n  return (\n    <div className=\"title\">\n      <h1>FireGram</h1>\n      <h2>Your Pictures</h2>\n      <p>Click + below to upload your pictures and save to gallery</p>\n    </div>\n  );\n};\n\nexport default Title;\n","import * as firebase from \"firebase/app\";\r\nimport \"firebase/storage\";\r\nimport \"firebase/firestore\";\r\n\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n  apiKey: \"AIzaSyCzNkI7ihBOe03eD4wt_pLYk6g5L68aKg0\",\r\n  authDomain: \"firegram-app-56481.firebaseapp.com\",\r\n  databaseURL: \"https://firegram-app-56481.firebaseio.com\",\r\n  projectId: \"firegram-app-56481\",\r\n  storageBucket: \"firegram-app-56481.appspot.com\",\r\n  messagingSenderId: \"1020471968993\",\r\n  appId: \"1:1020471968993:web:a4d8f226b340116b2623a0\",\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n// object for storage\r\nconst projectStorage = firebase.storage();\r\n// object for firestore\r\nconst projectFirestore = firebase.firestore();\r\n// timestamp\r\nconst timestamp = firebase.firestore.FieldValue.serverTimestamp;\r\n\r\nexport { projectFirestore, projectStorage, timestamp };\r\n","// Custom hooks for interacting with firebase storage\r\nimport { useState, useEffect } from \"react\";\r\nimport {\r\n  projectStorage,\r\n  projectFirestore,\r\n  timestamp,\r\n} from \"../firebase/config\";\r\n\r\nconst useStorage = (file) => {\r\n  const [progress, setProgress] = useState(0);\r\n  const [error, setError] = useState(null);\r\n  const [url, setUrl] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // useEffect takes in a function and a dependecy as parameters. The function will be fired everytime the dependency parameter changes. It's like an event handler.\r\n    //references\r\n    const storageRef = projectStorage.ref(file.name); // create a storage reference name for the file to be uploaded\r\n    const collectionRef = projectFirestore.collection(\"images\"); // create a collection reference in firestore\r\n\r\n    // asynchronous function to upload file to firebase storage\r\n    storageRef.put(file).on(\r\n      \"state_changed\",\r\n      (snap) => {\r\n        let percent = (snap.bytesTransferred / snap.totalBytes) * 100;\r\n        setProgress(percent);\r\n      },\r\n      (err) => {\r\n        setError(err);\r\n      },\r\n      async () => {\r\n        const createdAt = timestamp();\r\n        const url = await storageRef.getDownloadURL(); // url will be updated once upload is successfull\r\n        collectionRef.add({\r\n          url: url,\r\n          createdAt: createdAt,\r\n        });\r\n        setUrl(url);\r\n      }\r\n    );\r\n  }, [file]);\r\n\r\n  return { progress, url, error };\r\n};\r\n\r\nexport default useStorage;\r\n","// Component for progress bar\r\nimport React, { useEffect } from \"react\";\r\nimport useStorage from \"../hooks/useStorage\";\r\nimport PropTypes from \"prop-types\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nconst Progressbar = ({ file, setFile }) => {\r\n  const { url, progress } = useStorage(file); // get progress and url from useStorage\r\n\r\n  useEffect(() => {\r\n    if (url) {\r\n      setFile(null); //reset the file to null to remove progress bar\r\n    }\r\n  }, [url, setFile]);\r\n  return (\r\n    <motion.div\r\n      initial={{ width: 0 }}\r\n      animate={{ width: progress + \"%\" }}\r\n      className=\"progress-bar\"\r\n    ></motion.div>\r\n  );\r\n};\r\n\r\nexport default Progressbar;\r\n\r\n//proptypes\r\nProgressbar.propType = {\r\n  file: PropTypes.object.isRequired,\r\n  setFile: PropTypes.func.isRequired,\r\n};\r\n","// Component to upload an image\r\nimport React, { useState } from \"react\";\r\nimport Progressbar from \"./Progressbar\";\r\n\r\nconst UploadForm = () => {\r\n  const [file, setFile] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  const imageTypes = [\"image/png\", \"image/jpeg\"];\r\n\r\n  const changeHandler = (e) => {\r\n    let selected = e.target.files[0]; // grab file\r\n\r\n    if (selected && imageTypes.includes(selected.type)) {\r\n      // file must be of type jpg or png\r\n      setFile(selected);\r\n      setError(\"\");\r\n    } else {\r\n      setFile(null);\r\n      setError(\"Please select an image file (png or jpg only)\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form>\r\n      <label>\r\n        <input type=\"file\" onChange={changeHandler} />\r\n        <span>+</span>\r\n      </label>\r\n      <div className=\"output\">\r\n        {error && <div className=\"error\">{error}</div>}\r\n        {file && <div>{file.name}</div>}\r\n        {file && <Progressbar file={file} setFile={setFile} />}\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default UploadForm;\r\n","// Custom hook for interacting with firebase firestore\r\nimport { useState, useEffect } from \"react\";\r\nimport { projectFirestore } from \"../firebase/config\";\r\n\r\nconst useFirestore = (collection) => {\r\n  const [docs, setDocs] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = projectFirestore\r\n      .collection(collection)\r\n      .orderBy(\"createdAt\", \"desc\")\r\n      .onSnapshot((snap) => {\r\n        //look at the database in realtime and obtain a snapshot of it and order it in descending order of 'created at'\r\n        let documents = [];\r\n        snap.forEach((doc) => {\r\n          documents.push({ ...doc.data(), id: doc.id });\r\n        });\r\n        setDocs(documents);\r\n      });\r\n\r\n    return () => unsubscribe();\r\n  }, [collection]);\r\n\r\n  return { docs };\r\n};\r\n\r\nexport default useFirestore;\r\n","// Component for image grid\r\nimport React from \"react\";\r\nimport useFirestore from \"../hooks/useFirestore\";\r\nimport PropTypes from \"prop-types\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nconst ImageGrid = ({ setSelectedImg }) => {\r\n  const { docs } = useFirestore(\"images\"); // get docs from useFirestore\r\n\r\n  return (\r\n    <div className=\"img-grid\">\r\n      {docs &&\r\n        docs.map((doc) => (\r\n          <motion.div\r\n            className=\"img-wrap\"\r\n            key={doc.id}\r\n            layout\r\n            whileHover={{ opacity: \"1\" }}\r\n            onClick={() => setSelectedImg(doc.url)} //get the img url when clicked and pass it to app.js\r\n          >\r\n            <motion.img\r\n              src={doc.url}\r\n              initial={{ opacity: \"0\" }}\r\n              animate={{ opacity: \"1\" }}\r\n              transition={{ delay: \"1\" }}\r\n              alt=\"uploaded pic\"\r\n            />\r\n          </motion.div>\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageGrid;\r\n\r\n//proptypes\r\nImageGrid.propType = {\r\n  setSelectedImg: PropTypes.func.isRequired,\r\n};\r\n","// Component for Modal to display enlarged image when clicked\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nconst Modal = ({ selectedImg, setSelectedImg }) => {\r\n  //get selected img url as prop from app.js\r\n\r\n  //function to close modal only if clicked target div has class backdrop\r\n  const handleClick = (e) => {\r\n    if (e.target.classList.contains(\"backdrop\")) {\r\n      setSelectedImg(null);\r\n    }\r\n  };\r\n  return (\r\n    <motion.div\r\n      initial={{ opacity: 0 }}\r\n      animate={{ opacity: 1 }}\r\n      className=\"backdrop\"\r\n      onClick={handleClick}\r\n    >\r\n      <motion.img\r\n        initial={{ y: \"-100vh\" }}\r\n        animate={{ y: \"0\" }}\r\n        src={selectedImg}\r\n        alt=\"enlarged pic\"\r\n      />\r\n    </motion.div>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n\r\n//propTypes\r\nModal.propType = {\r\n  selectedImg: PropTypes.object.isRequired,\r\n  setSelectedImg: PropTypes.func.isRequired,\r\n};\r\n","import React, { useState } from \"react\";\nimport Title from \"./comps/Title\";\nimport UploadForm from \"./comps/UploadForm\";\nimport ImageGrid from \"./comps/ImageGrid\";\nimport Modal from \"./comps/Modal\";\n\nfunction App() {\n  const [selectedImg, setSelectedImg] = useState(null); //state and function for getting clicked img\n  return (\n    <div className=\"App\">\n      <Title />\n      <UploadForm />\n      <ImageGrid setSelectedImg={setSelectedImg} />\n      {selectedImg && (\n        <Modal selectedImg={selectedImg} setSelectedImg={setSelectedImg} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}